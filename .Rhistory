## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
# Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
# Set the matrix
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
# Return to a list
list(set = set,
get =get,
getInverse = getInverse,
getInverse = getInverse)
}
source(cachematrix.R)
source(ProgrammingAssignment2/cachematrix.R)
ls
cd
source(ProgrammingAssignment2/cachematrix.R)
source(~/Documents/GitHub/ProgrammingAssignment2/cachematrix.R)
source(Documents/GitHub/ProgrammingAssignment2/cachematrix.R)
source(/Documents/GitHub/ProgrammingAssignment2/cachematrix.R)
# Cache the Inverse of a Matrix
# This function is gonna crate a special "matrix" object that can cache its inverse.
# Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
# Set the matrix
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
# Return to a list
list(set = set,
get =get,
getInverse = getInverse,
getInverse = getInverse)
}
test_matrix <- makeCacheMatrix(1:4, 2, 2)
test_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
test_matrix
test_matrix$get()
test_matrix$getInverse()
cacheSlove(test_matrix)
cacheSlove(test_matrix)
## Cache the Inverse of a Matrix
## This function is gonna crate a special "matrix" object that can cache its inverse.
## Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
## Set the matrix
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
## Return to a list
list(set = set,
get =get,
getInverse = getInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" crated by 'makeCacheMatrix'
## above. It should retrieve the inverse from the cache if the inverse has been calculated.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
## Cache the Inverse of a Matrix
## This function is gonna crate a special "matrix" object that can cache its inverse.
## Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<-y
inv <<- NULL
}
## Set the matrix
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
## Return to a list
list(set = set,
get =get,
getInverse = getInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" crated by 'makeCacheMatrix'
## above. It should retrieve the inverse from the cache if the inverse has been calculated.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
test_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
test_matrix$get()
test_matrix$getInverse()
cacaheSolve(test_matrix)
cacheSolve(test_matrix)
cacheSolve(test_matrix)
cacheSolve(test_matrix)
cacheSolve(test_matrix)
cacheSolve(test_matrix)
cacheSolve(test_matrix)
## Cache the Inverse of a Matrix
## This function is gonna crate a special "matrix" object that can cache its inverse.
## Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<- NULL
}
## Set the matrix
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
## Return to a list
list(set = set,
get = get,
setmean = setmean,
getmean = getmean)
}
## This function computes the inverse of the special "matrix" crated by 'makeCacheMatrix'
## above. It should retrieve the inverse from the cache if the inverse has been calculated.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Cache the Inverse of a Matrix
## This function is gonna crate a special "matrix" object that can cache its inverse.
## Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<- NULL
}
## Set the matrix
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
## Return to a list
list(set = set,
get = get,
setmean = setmean,
getmean = getmean)
}
## This function computes the inverse of the special "matrix" crated by 'makeCacheMatrix'
## above. It should retrieve the inverse from the cache if the inverse has been calculated.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
## Cache the Inverse of a Matrix
## This function is gonna crate a special "matrix" object that can cache its inverse.
## Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<-y
m <<- NULL
}
## Set the matrix
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
## Return to a list
list(set = set,
get = get,
setmean = setmean,
getmean = getmean)
}
## This function computes the inverse of the special "matrix" crated by 'makeCacheMatrix'
## above. It should retrieve the inverse from the cache if the inverse has been calculated.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- makeCacheMatrix(matrix(1:4,2,2))
test$get()
test$getInverse()
test$getmean()
cacheSlove(test)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmean()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cacheSolve()
cacheSolve(test)
## Cache the Inverse of a Matrix
## This function is gonna crate a special "matrix" object that can cache its inverse.
## Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix#getInverse()
my_matrix$getInverse()
cacheSolve(my_matrix)
## Cache the Inverse of a Matrix
## This function is gonna crate a special "matrix" object that can cache its inverse.
## Crate a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
## Initialize the inverse property
inv <- NULL
## Set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
## Return to a list
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. It should retrieve the inverse from the cache if the
## inverse has been calculated.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
## Return the inverse if it's been set
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
test_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
test_matrix$get()
test_matrix$getInverse()
cacheSolve(test_matrix)
cacheSolve((test_matrix))
test_matrix$getInverse()
test_matrix$set(matrix(c(1,2,3,4),2, 2))
test_matrix$get()
test_matrix$getInverse()
cacheSolve(test_matrix)
test_matrix$set(matrix(c(4,2,4,6),2, 2))
test_matrix$getInverse()
test_matrix$get()
cacheSolve(test_matrix)
cacheSolve(test_matrix)
test_matrix$getInverse()
